/*
auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, {
  useRef,
  useState,
  useEffect,
  FunctionComponent,
  useLayoutEffect,
} from "react"
import { useFrame } from "react-three-fiber"

import { GLTF } from "three/examples/jsm/loaders/GLTFLoader"
import { AnimationMixer, LoopPingPong } from "three"
import useGLTF from "../../lib/hooks/useGLTF"

type GLTFResult = GLTF & {
  nodes: {
    hand_anatomy_man: THREE.SkinnedMesh
    root: THREE.Bone
    ["MCH-hand_ikparentL"]: THREE.Bone
    ["MCH-upper_arm_ik_targetparentL"]: THREE.Bone
  }
  materials: {
    White: THREE.MeshStandardMaterial
  }
}

type ActionName = "rigAction"
type GLTFActions = Record<ActionName, THREE.AnimationAction>

interface IProps {
  gltfURL: string
}

const HandAnimationModel: FunctionComponent<
  IProps & JSX.IntrinsicElements["group"]
> = ({ gltfURL, ...props }) => {
  useLayoutEffect(() => void useGLTF.preload(gltfURL), [gltfURL])

  const group = useRef<THREE.Group>()
  const data = useGLTF<GLTFResult>(gltfURL)

  const { nodes, materials, animations } = data

  const actions = useRef<GLTFActions>()
  const [mixer] = useState(() => new AnimationMixer(nodes.hand_anatomy_man))

  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      rigAction: mixer.clipAction(animations[0], group.current),
    }
    actions.current.rigAction.timeScale = 1
    actions.current.rigAction.loop = LoopPingPong
    actions.current.rigAction.play()
    return () => animations.forEach(clip => mixer.uncacheClip(clip))
  }, [])

  return (
    <group ref={group} {...props}>
      <group position={[0, 0, 0]} scale={[1, 1, 1]}>
        <group position={[0, 0, 0]} scale={[1, 1, 1]}>
          <primitive object={nodes.root} />
          <primitive object={nodes["MCH-hand_ikparentL"]} />
          <primitive object={nodes["MCH-upper_arm_ik_targetparentL"]} />
          <skinnedMesh
            material={materials.White}
            geometry={nodes.hand_anatomy_man.geometry}
            skeleton={nodes.hand_anatomy_man.skeleton}
          />
        </group>
      </group>
    </group>
  )
}

export default HandAnimationModel
